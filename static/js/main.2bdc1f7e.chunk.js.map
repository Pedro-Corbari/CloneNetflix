{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","console","log","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","loadAll","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","scrollListener","scrollY","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bdc1f7e.chunk.js","sourcesContent":["const API_KEY = '123e9de6e1becafdb33b989fc25c13b1';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\n/*\r\nOriginais\r\nrecomendados (Tranding)\r\nem alta (top rated)\r\nAção\r\nComedia\r\nTerror\r\nRomance\r\nDocumentarios\r\n*/\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\n\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'Tranding',\r\n                title: 'Recomendados para você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentário',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n        ];\r\n\r\n    },\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n\r\n        if (movieId) {\r\n            switch (type) {\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                    break;\r\n\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                    break;\r\n                default:\r\n                    info = null;\r\n                    break;\r\n\r\n\r\n            }\r\n        }\r\n        return info;\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport './MovieRow.css';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({ title, items }) => {\r\n    const [scrollX, setScrollX] = useState(0);\r\n\r\n    const handleLeftArrow = () => {\r\n        let x = scrollX + Math.round(window.innerWidth);\r\n        if (x > 0) {\r\n            x = 0\r\n        }\r\n        setScrollX(x);\r\n    }\r\n    const handleRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth);\r\n        let listW = items.results.length * 150;\r\n        if (window.innerWidth - listW > x) {\r\n            x = (window.innerWidth - listW) - 60;\r\n\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>\r\n                {title}\r\n            </h2>\r\n            <div className=\"movieRow--Left\" onClick={handleLeftArrow}>\r\n                <NavigateBeforeIcon style={{ fontSize: 50 }} />\r\n            </div>\r\n            <div className=\"movieRow--Right\" onClick={handleRightArrow}>\r\n                <NavigateNextIcon style={{ fontSize: 50 }} />\r\n            </div>\r\n\r\n\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                }}>\r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div key={key} className=\"movieRow--item\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './FeaturedMovie.css';\r\n\r\nexport default ({ item }) => {\r\n    console.log(item);\r\n\r\n    let firstDate = new Date(item.first_air_date);\r\n    let genres = [];\r\n    for (let i in item.genres) {\r\n        genres.push(item.genres[i].name);\r\n    }\r\n\r\n    let description = item.overview;\r\n    if (description.length > 200) {\r\n        description = description.substring(0, 200) + '...';\r\n    }\r\n\r\n    return (\r\n        <section className=\"featured\" style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n        }}>\r\n            <div className=\"featured--vertical\">\r\n                <div className=\"featured--horizontal\">\r\n                    <div className=\"featured--name\">{item.original_name}\r\n                    </div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">\r\n                            {item.vote_average} pontos\r\n                        </div>\r\n                        <div className=\"featured--year\">\r\n                            {firstDate.getFullYear()}\r\n                        </div>\r\n                        <div className=\"featured--seasons\">\r\n                            {item.number_of_seasons} Temporada{item.number_of_seasons !== 1 ? 's' : ''}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"featured--description\">{description}</div>\r\n                    <div className=\"featured--buttons\">\r\n                        <a href={`/watch/${item.id}`} className=\"featured--watchbutton\"> ► Assistir</a>\r\n                        <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\"> + Minha Lista</a>\r\n                    </div>\r\n                    <div className=\"featured--genres\"><strong>Gêneros:</strong > {genres.join(', ')}</div>\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from \"react\";\r\nimport './Header.css';\r\n\r\nexport default ({ black }) => {\r\n    return (\r\n        <header className={black ? 'Black' : ' '}>\r\n            <div className=\"Header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\" alt=\"Logo Netflix\"></img>\r\n                </a>\r\n            </div>\r\n            <div className=\"Header--User\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://pro2-bar-s3-cdn-cf1.myportfolio.com/dddb0c1b4ab622854dd81280840458d3/92995677ac0aab719760c33c_rw_600.png?h=c453d5442731bca5c02fcc8a4542af57\" alt=\"Usuário\"></img>\r\n                </a>\r\n            </div>\r\n        </header>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\";\nimport Tmdb from \"./Tmdb\";\nimport MovieRow from \"./components/MovieRow\";\nimport './App.css';\nimport FeaturedMovie from \"./components/FeaturedMovie\";\nimport Header from \"./components/Header\";\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      //Pegando a lista Total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //Pegando o filme em destaque\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n\n    }\n\n\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 70) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  }, [])\n\n\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData &&\n        <FeaturedMovie item={featuredData} />\n\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n        <strong>Site desenvolvido em React por Pedro Corbari</strong><br />\n        <br />\n        Direitos de imagem pertencentes a Netflix.<br />\n        Dados providos por <strong>Themoviedb.org</strong><br />\n      </footer>\n\n\n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src=\"https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif\" alt=\"Loading\"></img>\n        </div>\n      }\n\n    </div>\n  );\n\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}